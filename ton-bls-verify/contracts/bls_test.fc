#include "imports/stdlib.fc";

const op::verify = "op::verify"c;
const int PK_SIZE = 48 * 8;
const int SGN_SIZE = 96 * 8;

int bls_verify(slice pk, slice msg, slice sgn) asm "BLS_VERIFY";


global int ctx_res;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_res = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_res, 32)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    
    if (op == op::verify) {
        int msg_size = in_msg_body~load_uint(32) * 8;
        ;; slice pk = ctx_pk;
        slice pk = first_bits(in_msg_body,PK_SIZE);
        in_msg_body~skip_bits(msg_size);
        cell c2 = in_msg_body~load_ref();
        slice body2 = c2.begin_parse();
        slice msg = first_bits(body2,msg_size);
        body2~skip_bits(msg_size);
        cell c3 = body2~load_ref();
        slice body3 = c3.begin_parse();
        slice sgn = first_bits(body3,SGN_SIZE);
        int a = bls_verify(pk,msg,sgn);
        if (a == 0) {
            ctx_res = 0;
        } else {
            ctx_res = 1;
        }
        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}


int get_res() method_id {
    load_data();
    return ctx_res;
}
