#include "imports/stdlib.fc";
#include "imports/merkle.fc";

const op::update_root = "op::update_root"c; ;; 0x412d7c98
const op::check_proof = "op::check_proof"c; ;; 0xe216a143

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int merkle_root;


;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    merkle_root = ds~load_uint(256);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(merkle_root, 256)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }


    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::update_root) {
        merkle_root = in_msg_body~load_uint(256);
        save_data();
        return ();
    }
    if (op == op::check_proof) {
        load_data();
        int tx_id = in_msg_body~load_uint(256);
        cell proof = in_msg_body~load_ref();
        if (check_merkle_proof(tx_id, proof, merkle_root)) {
            return();
        } else {
            throw(306);
        }
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

int get_merkle_root() method_id {
    load_data();
    return merkle_root;
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts


